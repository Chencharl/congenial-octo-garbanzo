import os
import pickle
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, random_split
from torch.optim.lr_scheduler import CosineAnnealingLR
from torchvision.transforms import RandomErasing, AutoAugment
from PIL import Image
from torch.optim.swa_utils import AveragedModel, SWALR
from torchsummary import summary

# 自动选择 CPU 或 GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Using device:", device)

# CIFAR-10 数据集路径
cifar10_dir = './data/cifar-10-python/cifar-10-batches-py'
cifar_test_path = './data/cifar_test_nolabel.pkl'

# 数据增强和归一化
train_transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(p=0.5),
    transforms.ColorJitter(brightness=0.2, contrast=0.2),
    transforms.AutoAugment(transforms.AutoAugmentPolicy.CIFAR10),  # 增强数据变换
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.247, 0.243, 0.261)),
    RandomErasing(p=0.3, scale=(0.02, 0.2), value=0)  # 降低擦除概率
])

# 测试集只进行归一化
test_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.247, 0.243, 0.261))
])

# 训练模型

def mixup_data(x, y, alpha=0.2):
    """Applies Mixup to training data"""
    lam = np.random.beta(alpha, alpha)
    index = torch.randperm(x.size(0)).to(device)
    mixed_x = lam * x + (1 - lam) * x[index, :]
    y_a, y_b = y, y[index]
    return mixed_x, y_a, y_b, lam

def mixup_criterion(criterion, pred, y_a, y_b, lam):
    return lam * criterion(pred, y_a) + (1 - lam) * criterion(pred, y_b)

# 训练

def train_model(model, train_loader, val_loader, epochs=200):
    best_acc = 0.0  # 记录最佳验证集准确率
    swa_start = epochs - 5  # SWA 训练开始的 epoch

    for epoch in range(epochs):
        model.train()
        running_loss = 0.0

        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            
            # 应用 Mixup
            mixed_x, y_a, y_b, lam = mixup_data(images, labels)
            outputs = model(mixed_x)
            loss = mixup_criterion(criterion, outputs, y_a, y_b, lam)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        # 调整学习率
        scheduler.step()

        # 验证集评估
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        val_acc = 100 * correct / total
        print(f'Epoch {epoch+1}, Loss: {running_loss/len(train_loader):.4f}, Validation Accuracy: {val_acc:.2f}%')

        # 记录最佳模型
        if val_acc > best_acc:
            best_acc = val_acc
            torch.save(model.state_dict(), "best_model.pth")

        # SWA 训练
        if epoch >= swa_start:
            swa_model.update_parameters(model)
            swa_scheduler.step()
    
    print("Training Complete. Best Validation Accuracy:", best_acc)

    # SWA 平滑权重
    torch.optim.swa_utils.update_bn(train_loader, swa_model)
    torch.save(swa_model.state_dict(), "swa_model.pth")
    print("✅ SWA Model Saved!")

# 训练模型
train_model(model, train_loader, val_loader, epochs=200)

# 计算测试集的预测结果
def generate_submission(model, test_loader):
    model.eval()
    predictions = []

    with torch.no_grad():
        for images in test_loader:
            images = images.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            predictions.extend(predicted.cpu().numpy())

    submission = pd.DataFrame({'ID': np.arange(len(predictions)), 'Labels': predictions})
    submission.to_csv('./submission.csv', index=False)
    print("✅ 提交文件已保存：./submission.csv")

# 加载最佳模型并进行预测
model.load_state_dict(torch.load("swa_model.pth"))
generate_submission(model, test_loader)

# 保存提交文件
summary(model, (3, 32, 32))
print("✅ 提交文件已保存：./submission.csv")

